package main

import (
	"fmt"
)

//"strconv"

//Package level variable declaration

// var (
// 	prime      string = "Optimus"
// 	autoBot    string = "Bulmble Bee"
// 	diceptagon string = "Star Screem"
// )

// var number int32
// package variable, exposed, scoped

const (
	_  = iota
	KB = 1 << (10 * iota)
	MB
	GB
)

// const (
// 	isAdmin = 1 << iota
// 	isHead
// 	canSeeF

// 	canSesAf
// 	canSeeAs
// 	canSeeEu
// 	canSeeNA
// 	canSeeSA
// )

func main() {
	// var num32 int = 45
	// fmt.Printf("%v, %T \n", num32, num32)

	//to int

	//j := float32(num32)
	//h := strconv.Itoa(num32)
	//fmt.Println(j)
	//fmt.Printf("%v  %T", h, h)

	// var n bool //= true
	// fmt.Printf("%v  %T", n, n)

	//Numeric Types
	//int8 -128 -> 127
	//int16 -32 768 -> 32 768
	//int32  -2 147 483 -> 2 147 483
	//int64

	//uint8
	//uint16
	//uint32

	//OPERATIONS
	// +, - , *, /, %

	//BIT OPERATORS

	// a := 10 //1010
	// b := 3  //0011

	// fmt.Println(a & b) // 0010
	// fmt.Println(a | b) // 1011
	// fmt.Println(a ^ b) // 1001
	// fmt.Println(a &^ b) // 0100

	//BIT SHIFTING
	// a := 8
	// fmt.Println(a << 3)
	// fmt.Println(a >> 3)

	//FLOATING POINT NUMBERS
	// var n1 float64 = 3.14
	// var n2 float64 = 13.7e72
	// var n3 float64 = 2.1e14
	// fmt.Printf(" %v \n", n1)
	// fmt.Printf(" %v\n", n2)
	// fmt.Printf(" %v", n3)

	//COMPLEX NUMBERS

	// a := 1 + 2i
	// b := 2 + 5.2i
	// var c complex64 = 1 + 3i
	// fmt.Printf("Real %v \n", real(c))
	// fmt.Printf("Imaginary %v \n", imag(c))

	// fmt.Println(a + b)
	// fmt.Println(a - b)
	// fmt.Println(a * b)
	// fmt.Println(a / b)

	//TEXT TYPE
	// n := "Hello world my name is kamukwamba"
	// b := []byte(n)
	// fmt.Printf("%v,  %T\n", string(b), b)

	//CONSTANTS
	// const nConst string = "Kamukwamba"
	// const a int = 42
	// var b int16 = 27
	// fmt.Println(nConst)

	// var roles byte = isAdmin | canSeeF | canSeeEu
	// fmt.Printf("%b", roles)
	// fileSize := 4000000000.
	// fmt.Printf("%.2fGB", fileSize/GB)

	////////COLLECTION TYPES
	//ARRAYS
	// grades := [...]int{45, 56, 78, 32}
	// var students [4]string

	// students[0] = "Kwamba"
	// students[1] = "Mulubwa"
	// students[2] = "Mwanja"
	// students[3] = "Edith"

	// fmt.Printf("students %v \n", students[3])

	// fmt.Println(grades)
	// var identityMetrix [3][3]int
	// identityMetrix[0] = [3]int{1, 0, 0}
	// identityMetrix[1] = [3]int{0, 1, 0}
	// identityMetrix[2] = [3]int{0, 0, 1}

	// fmt.Printf("%v", identityMetrix)

	////ARRAYS, SLICES, MAKE
	// a := []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 0}
	// b := a[:]
	// c := a[3:]
	// d := a[:6]
	// e := a[2:int(len(a))]

	// fmt.Println(b)
	// fmt.Println(c)
	// fmt.Println(d)
	// fmt.Println(e)

	// // b := &a
	// // b[1] = 5

	// fmt.Printf("Array Length%v   Capacity %v", a, cap(a))
	// // fmt.Println(b)

	// a := make([]int, 3)
	// a := []int{}

	// // a = append(a, 23)
	// a = append(a, []int{2, 3, 4, 5, 6, 7, 8, 9}...)
	// fmt.Println(a)

	// c := a[:len(a)-1]

	// d := append(a[:5], a[6:]...)

	// fmt.Println(c)
	// fmt.Println(d)

}
